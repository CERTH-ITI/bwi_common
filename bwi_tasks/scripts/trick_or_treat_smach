#!/usr/bin/env python

import knowledge_representation
import rospy
import smach_ros
import rospkg
import random

from knowledge_representation import LongTermMemoryConduit
from smach import StateMachine, State

from bwi_tasks.common import control_flow, task_machine
from bwi_tasks.common import states as common_states
from bwi_tasks.halloween import states as halloween_states
from bwi_kr_execution import goal_formulators, knowledge


def main():
    rospy.init_node("visit_door_list_smach")

    simulation = rospy.get_param("~simulation", False)
    introspect = rospy.get_param("~introspect", False)
    State.simulation = simulation

    ltmc = knowledge_representation.get_default_ltmc()

    task_machine.get_recover_from_failure_sm(ltmc)

    rospack = rospkg.RosPack()

    sentences = ['careful.mp3', 'costum.mp3', 'happy.mp3', 'hey_human.mp3', 'names.txt', 'spiderbot.mp3', 'spider_robot.mp3', 'spooky.mp3', 'sugars.mp3', 'trick.mp3']

    # Create top state machine
    sm = StateMachine(outcomes=['succeeded', 'preempted', 'aborted'])
    # Open the container
    with sm:
        # Add states
        StateMachine.add_auto("DECIDE_DESTINATION", knowledge.GetRandomBwiLocation(ltmc), ["succeeded"])
	#control_flow.inject_userdata_auto("DECIDE_DESTINATION", "location", "d3_414b1")
        StateMachine.add('GOTO_DOOR', task_machine.generate_goal_based_task_sm(
                              goal_formulators.GoToLocationName(), ["location"]),
                         transitions={"succeeded": "DECIDE_DESTINATION",
                                      "preempted": "TRICK_OR_TREAT",
                                      'aborted': 'DECIDE_DESTINATION'})
        #StateMachine.add_auto("TRICK_OR_TREAT", halloween_states.PlaySound(rospack.get_path("bwi_tasks") + "/data/happy_halloween.mp3"), ["succeeded"])
	StateMachine.add_auto("TRICK_OR_TREAT", halloween_states.PlaySound("/home/bwilab/Downloads/Halloween/", sentences), ["succeeded"])
        StateMachine.add("Wait", common_states.Wait(5), transitions={"succeeded": "DECIDE_DESTINATION"})

    if introspect:
        sis = smach_ros.IntrospectionServer('introspection_server', sm, '/SM_ROOT')
        sis.start()

    # Execute SMACH plan
    outcome = sm.execute()

    if introspect:
        rospy.spin()
        sis.stop()


if __name__ == '__main__':
    main()
